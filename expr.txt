expr ::= simpleExpr | '(' expr ')'
simpleExpr ::= var | opExpr | literal
literal ::= 'null' | 'true' | 'false' | 'undefined' | number | string
number ::= '-'? [0-9]? ('.' [0-9]+) ?
string ::= '''' [^']* '''' | '"' [^"]* '"'
var ::= [a-zA-Z_][a-zA-Z0-9_.]*
opExpr ::= unaryOpExpr | binaryOpExpr
unaryOpExpr ::= unaryOp expr
unaryOp ::= '!' | 'not'
binaryOpExpr ::= expr binaryOp expr
binaryOp ::= '=' | '==' | '<' | '>' | '<=' | '>=' | 'or' | 'and' | '||' | '&&'

statementFragment ::= '{{' statement '}}'
statement ::= if | elseif | else | each | assignment | endif | endeach
if ::= 'if' expr
elseif ::= ( 'elseif' | 'elif' | 'elsif' ) expr
else ::= 'else'
each ::= 'each' expr 'as' var (',' var)?
assignment ::= var '=' expr
endif ::= '/if'
endeach ::= '/each'

outputVar ::= '${' expr '}'

